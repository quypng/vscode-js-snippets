{

  // Place your snippets for JavaScript here. Each snippet is defined under a snippet name and has a prefix, body and 
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
  // same ids are connected.
  // Example:
  // "Print to console": {
  //   "prefix": "log",
  //   "body": [
  //     "console.log('$1');",
  //     "$2"
  //   ],
  //   "description": "Log output to console"
  // },
  "hr tag": {
    "prefix": "hr",
    "body": [
      "<hr/>$2"
    ],
    "description": "hr tag"
  },
  "span tag": {
    "prefix": "span",
    "body": [
      "<span>$1</span>$2"
    ],
    "description": "span tag"
  },
  "anchor tag": {
    "prefix": "a",
    "body": [
      "<a href=\"$1\">$2</a>$3"
    ],
    "description": "unordered tag"
  },
  "ul tag": {
    "prefix": "ul",
    "body": [
      "<ul></ul>"
    ],
    "description": "unordered tag"
  },
  "li tag": {
    "prefix": "li",
    "body": [
      "<li></li>"
    ],
    "description": "list tag"
  },
  "strong tag": {
    "prefix": "strong",
    "body": [
      "<strong></strong>"
    ],
    "description": "strong tag"
  },
  "break tag": {
    "prefix": "br",
    "body": [
      "<br/>"
    ],
    "description": "<wildcard /> tag"
  },
  "blank tag": {
    "prefix": "<$",
    "body": [
      "${4:<$1 ${2}=${3} />}"
    ],
    "description": "<wildcard /> tag"
  },
  // HTML tags
  "div tag": {
    "prefix": "div",
    "body": [
      "${2:<div>$1</div>}"
    ],
    "description": "<div></div> tag"
  },
  "img tag": {
    "prefix": "img",
    "body": [
      "${2:<img>$1</img>}"
    ],
    "description": "<img></img> tag"
  },
  "h1 tag": {
    "prefix": "h1",
    "body": [
      "${2:<h1>$1</h1>}"
    ],
    "description": "header tag"
  },
  "h2 tag": {
    "prefix": "h2",
    "body": [
      "${2:<h2>$1</h2>}"
    ],
    "description": "header tag"
  },
  "h3 tag": {
    "prefix": "h3",
    "body": [
      "${2:<h3>$1</h3>}"
    ],
    "description": "header tag"
  },
  "h4 tag": {
    "prefix": "h4",
    "body": [
      "${2:<h4>$1</h4>}"
    ],
    "description": "header tag"
  },
  "h5 tag": {
    "prefix": "h5",
    "body": [
      "${2:<h5>$1</h5>}"
    ],
    "description": "header tag"
  },
  "h6 tag": {
    "prefix": "h6",
    "body": [
      "${2:<h6>$1</h6>}"
    ],
    "description": "header tag"
  },
  "p tag": {
    "prefix": "para",
    "body": [
      "${2:<p id=\"$1\"></p>}"
    ],
    "description": "<p></p> tag"
  },
  // jQuery
  "jQuery variable tag": {
    "prefix": "jqv",
    "body": [
      "var $${1:name} = $(${2:param});"
    ],
    "description": "jQuery variable tag"
  },
  // document.writeln
  "Write line to document": {
    "prefix": "wln",
    "body": [
      "document.writeln(\"<p>\" + $1 + \"</p>\");$2"
    ],
    "description": "Write to document"
  },
  "Write to document": {
    "prefix": "wr",
    "body": [
      "document.write($1 + ' ');$2"
    ],
    "description": "Write to document"
  },
  "Write to innherHTML by id": {
    "prefix": "gid",
    "body": [
      "document.getElementById(\"$1\").innerHTML = $2;$3"
    ],
    "description": "Write to innerHTML by id"
  },
  "Prompt the user": {
    "prefix": "ask",
    "body": [
      "prompt(\"$1\");$2"
    ],
    "description": "Prompt the user"
  },
  "Alert the user": {
    "prefix": "alt",
    "body": [
      "alert(\"$1\");$2"
    ],
    "description": "Alert the user"
  },
  // Random Number Generator with Start and End
  "Random number generator with range": {
    "prefix": "rng",
    "body": [
      "var randomNumber = Math.floor(Math.random() * (${1:upper} - ${2:lower} + 1)) + ${2:lower};$3"
    ],
    "description": "Random number generator with range"
  },
  // Random Number Generator
  "Random number generator": {
    "prefix": "rnd",
    "body": [
      "var randomNumber = Math.floor(Math.random() * $1) + 1;$3"
    ],
    "description": "Random number generator"
  },
  // Parsing integer and float
  "Parse to integer": {
    "prefix": "pti",
    "body": [
      "parseInt($1);$2"
    ],
    "description": "Parse to integer"
  },
  "Parse to float": {
    "prefix": "ptf",
    "body": [
      "parseFloat($1);$2"
    ],
    "description": "Parse to float"
  },
  // Typeof snippet
  "Typeof function": {
    "prefix": "tf",
    "body": [
      "typeof($1);$2"
    ],
    "description": "Typeof function"
  },
  // Ask to integer
  "Ask to integer": {
    "prefix": "aski",
    "body": [
      "parseInt(prompt(\"$1\"));"
    ],
    "description": "Ask to integer"
  },
  // Ask to float
  "Ask to float": {
    "prefix": "askf",
    "body": [
      "parseFloat(prompt(\"$1\"));"
    ],
    "description": "Ask to float"
  }, // Ask to string
  "Ask to string": {
    "prefix": "asks",
    "body": [
      "var ${1:name} = prompt(\"$2\")$3;"
    ],
    "description": "Ask to string"
  },

  // Equality
  "===": {
    "prefix": "is",
    "body": [
      "=== "
    ],
    "description": "==="
  },
  // Ask to float
  "!==": {
    "prefix": "isn",
    "body": [
      "!== "
    ],
    "description": "!=="
  },

  // Conditional
  "Condition": {
    "prefix": "cond",
    "body": [
      "$1 === $2"
    ],
    "description": "Condition"
  },

  // isNaN
  "is not a number": {
    "prefix": "isnn",
    "body": [
      "isNaN($1);"
    ],
    "description": "is not a number"
  },

  // Array tag
  "Array tag": {
    "prefix": "arr",
    "body": [
      "var ${1:name} = [$2];$3"
    ],
    "description": "Array string tag"
  },
  "Array string tag": {
    "prefix": "arrs",
    "body": [
      "var ${1:name} = [", "  '$2',", "  '$3',", "  '$4'",
      "];$5"
    ],
    "description": "Array string tag"
  },
  "Array number tag": {
    "prefix": "arrn",
    "body": [
      "var ${1:name} = [", "$2, $3, $4",
      "];$5"
    ],
    "description": "Array number tag"
  },

  // Push to array
  "Push to array": {
    "prefix": "push",
    "body": [
      "${1:name}.push($2);",
      "$3"
    ],
    "description": "Push item to array"
  },

  // Unshift array
  "Adding item to beginning of the list": {
    "prefix": "unshift",
    "body": [
      "${1:name}.unshift($2);",
      "$3"
    ],
    "description": "Adding item to beginning of the list"
  },

  // Pop array
  "Pop last item from the list": {
    "prefix": "pop",
    "body": [
      "${1:name}.pop($2);",
      "$3"
    ],
    "description": "Pop last item from the list"
  },

  // Shift array
  "Removing first item from the list": {
    "prefix": "shift",
    "body": [
      "${1:name}.shift($2);",
      "$3"
    ],
    "description": "Removing first item from the the list"
  },

  // Object declaration
  "Object declaration": {
    "prefix": "obj",
    "body": [
      "var ${1:objectName} = {",
      "  $2: '$3',",
      "  $4: '$5'",
      "};$6"
    ],
    "description": "Object declaration"
  },

  // Array of objects
  "Array of objects": {
    "prefix": "arro",
    "body": [
      "var ${1:objectName} = [",
      "  {",
      "    ${2:name}: ${3:value}",
      "  }",
      "];"
    ],
    "description": "Array of objects"
  },


  // Message tag
  "Message Tag": {
    "prefix": "msg",
    "body": [
      "var ${1:msgName} = '<p>' + $2 + '</p>';$3"
    ],
    "description": "Message tag"
  },

  // Add to message
  // Message tag
  "Append to message": {
    "prefix": "apm",
    "body": [
      "${1:msgName} += '<p>' + $2 + '</p>';$3"
    ],
    "description": "Append to message"
  },

  // Logical OR
  "Logical OR": {
    "prefix": "or",
    "body": [
      "||"
    ],
    "description": "Logical OR"
  },

  // $(this) method
  "$(this) method": {
    "prefix": "this",
    "body": [
      "$(this)$1"
    ],
    "description": "$(this) method"
  }

}